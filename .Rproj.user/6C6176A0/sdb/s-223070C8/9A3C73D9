{
    "contents" : "## Put comments here that give an overall description of what your\n## functions do\n\n## Write a short comment describing this function\n\n## course material example\n\n##makeVector <- function(x = numeric()) {\n##  m <- NULL\n##  set <- function(y) {\n##    x <<- y\n##    m <<- NULL\n##  }\n##  get <- function() x\n##  setmean <- function(mean) m <<- mean\n##  getmean <- function() m\n##  list(set = set, get = get,\n##       setmean = setmean,\n##       getmean = getmean)\n##}\n\n\nmakeCacheMatrix <- function(x = matrix()) {\n  ## SVE: Let's Try\n  \n  m <- NULL\n  set <- function(y) {\n    x <<- y\n    m <<- NULL\n  }\n  get <- function() x\n  getinv <- function() m\n  setinv <- function(solve) m <<- solve\n  list(set = set, get = get, setinv = setinv, getinv = getinv)\n  \n}\n\n\n## Write a short comment describing this function\n\ncacheSolve <- function(x, ...) {\n  ## SVE: Let's Try\n  ## Return a matrix that is the inverse of 'x'\n  \n  m<- x$getinv()\n  if(!is.null(m)) {\n    message(\"getting cached data\")\n    return(m)\n  }\n  data <- x$get()\n  ## Solve takes as second argument a numeric or complex vector or matrix giving the right-hand side(s) of the linear system. \n  ## If missing, b is taken to be an identity matrix and solve will return the inverse of \"data\"\n  m<- solve(data, ...)\n  x$setinv(m)\n  m\n  \n  ## Return a matrix that is the inverse of 'x'\n  \n}\n",
    "created" : 1424536394358.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2902439978",
    "id" : "9A3C73D9",
    "lastKnownWriteTime" : 1424560007,
    "path" : "~/GitHub/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}